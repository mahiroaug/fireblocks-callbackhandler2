AWSTemplateFormatVersion: "2010-09-09"
Description: "Fireblocks Callback Handler - Security Stack (Security Groups, IAM, VPC Endpoints)"

Parameters:
  ProjectName:
    Type: String
    Default: fireblocks-cbh
    Description: Project name for resource naming

  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, stg, prod, cm]
    Description: Environment name

Resources:
  # Cosigner用セキュリティグループ
  CosignerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Cosigner (Nitro Enclave)
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-VPC-ID
      SecurityGroupEgress:
        # All Traffic Outbound
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: "All traffic outbound"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-cosigner-sg-${Environment}
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: security
        - Key: Project
          Value: fireblocks-callback-handler
        - Key: ManagedBy
          Value: cloudformation

  # VPCエンドポイント用セキュリティグループ
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC Endpoints
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-VPC-ID
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc-endpoint-sg-${Environment}
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: security
        - Key: Project
          Value: fireblocks-callback-handler
        - Key: ManagedBy
          Value: cloudformation

  # Lambda 用セキュリティグループ
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda Callback Handler
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-VPC-ID
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-lambda-sg-${Environment}
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: security
        - Key: Project
          Value: fireblocks-callback-handler
        - Key: ManagedBy
          Value: cloudformation

  # セキュリティグループルール（循環依存を避けるため分離）
  # Cosigner -> VPC Endpoints (SSM, API Gateway等)
  CosignerToVPCEndpointsRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref CosignerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref VPCEndpointSecurityGroup
      Description: "HTTPS to VPC Endpoints"

  # Lambda -> VPC Endpoints
  LambdaToVPCEndpointsRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref VPCEndpointSecurityGroup
      Description: "HTTPS to VPC Endpoints"

  # VPC Endpoints <- Cosigner
  VPCEndpointsFromCosignerRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCEndpointSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref CosignerSecurityGroup
      Description: "HTTPS from Cosigner"

  # VPC Endpoints <- Lambda
  VPCEndpointsFromLambdaRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCEndpointSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Description: "HTTPS from Lambda"

  # S3 Gateway Endpoint
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-VPC-ID
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      RouteTableIds:
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-PrivateRouteTable-ID

  # SSM Interface Endpoint
  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-VPC-ID
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      SubnetIds:
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-PrivateSubnet-ID
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "ssm:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: "ssm:PutParameter"
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/*"
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: "ssm:PutParameter"
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/aws/ec2/${ProjectName}-*"

  # SSM Messages Endpoint
  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-VPC-ID
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      VpcEndpointType: Interface
      SubnetIds:
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-PrivateSubnet-ID
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true

  # EC2 Messages Endpoint
  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-VPC-ID
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      VpcEndpointType: Interface
      SubnetIds:
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-PrivateSubnet-ID
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true

  # API Gateway VPC Endpoint (Cosigner -> Lambda 通信用)
  APIGatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-VPC-ID
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.execute-api"
      VpcEndpointType: Interface
      SubnetIds:
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-PrivateSubnet-ID
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "execute-api:Invoke"
            Resource: "*"

  # ECR VPC Endpoint (Lambda Container Image用)
  ECREndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-VPC-ID
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.dkr"
      VpcEndpointType: Interface
      SubnetIds:
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-PrivateSubnet-ID
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true

  # CloudWatch Logs VPC Endpoint
  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-VPC-ID
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"
      VpcEndpointType: Interface
      SubnetIds:
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-PrivateSubnet-ID
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true

  # ECR API VPC Endpoint
  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-VPC-ID
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.api"
      VpcEndpointType: Interface
      SubnetIds:
        - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-PrivateSubnet-ID
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true

  # Cosigner IAM Role
  CosignerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-cosigner-role-${Environment}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: CosignerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/*"
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/aws/ec2/${ProjectName}-*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/ec2/cosigner*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${ProjectName}-cosigner-${Environment}-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource: !Sub "arn:aws:s3:::${ProjectName}-cosigner-${Environment}-${AWS::AccountId}"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: security
        - Key: Project
          Value: fireblocks-callback-handler
        - Key: ManagedBy
          Value: cloudformation

  # Cosigner Instance Profile
  CosignerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref CosignerRole

  # Lambda Execution Role (旧名: ECSTaskExecutionRole)
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-lambda-execution-role-${Environment}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # SSM Parameter Store Access
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/fireblocks-callback-infrastructure/*"
              # KMS Decrypt for SSM Parameters
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
              # CloudWatch Logs (Lambda VPC用)
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: security
        - Key: Project
          Value: fireblocks-callback-handler
        - Key: ManagedBy
          Value: cloudformation

  # KMS Customer Managed Key for Cosigner
  CosignerKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS key for Fireblocks Cosigner encryption"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: security
        - Key: Project
          Value: fireblocks-callback-handler
        - Key: ManagedBy
          Value: cloudformation

  # KMS Key Alias for easier reference
  CosignerKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${ProjectName}-cosigner-${Environment}"
      TargetKeyId: !Ref CosignerKMSKey

  # KMS Key permissions for Cosigner Role (循環依存解決のため分離)
  CosignerKMSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CosignerKMSPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !GetAtt CosignerKMSKey.Arn
      Roles:
        - !Ref CosignerRole

Outputs:
  CosignerSecurityGroupId:
    Description: Cosigner Security Group ID
    Value: !Ref CosignerSecurityGroup
    Export:
      Name: !Sub ${ProjectName}-${Environment}-CosignerSecurityGroup-ID

  VPCEndpointSecurityGroupId:
    Description: VPC Endpoint Security Group ID
    Value: !Ref VPCEndpointSecurityGroup
    Export:
      Name: !Sub ${ProjectName}-${Environment}-VPCEndpointSecurityGroup-ID

  LambdaSecurityGroupId:
    Description: Lambda Security Group ID
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub ${ProjectName}-${Environment}-LambdaSecurityGroup-ID

  CosignerRoleArn:
    Description: Cosigner IAM Role ARN
    Value: !GetAtt CosignerRole.Arn
    Export:
      Name: !Sub ${ProjectName}-${Environment}-CosignerRole-ARN

  CosignerInstanceProfileArn:
    Description: Cosigner Instance Profile ARN
    Value: !GetAtt CosignerInstanceProfile.Arn
    Export:
      Name: !Sub ${ProjectName}-${Environment}-CosignerInstanceProfile-ARN

  CosignerInstanceProfileName:
    Description: Cosigner Instance Profile Name
    Value: !Ref CosignerInstanceProfile
    Export:
      Name: !Sub ${ProjectName}-${Environment}-CosignerInstanceProfile-Name

  # Lambda Execution Role (旧ECSTaskExecutionRole互換)
  LambdaExecutionRoleArn:
    Description: Lambda Execution Role ARN
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub ${ProjectName}-${Environment}-LambdaExecutionRole-ARN

  # Backward compatibility - 既存のスタックが参照している名前を維持
  ECSTaskExecutionRoleArn:
    Description: Lambda Execution Role ARN (backward compatibility)
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub ${ProjectName}-${Environment}-ECSTaskExecutionRole-ARN

  CosignerKMSKeyId:
    Description: Cosigner KMS Key ID
    Value: !Ref CosignerKMSKey
    Export:
      Name: !Sub ${ProjectName}-${Environment}-CosignerKMSKey-ID

  CosignerKMSKeyArn:
    Description: Cosigner KMS Key ARN
    Value: !GetAtt CosignerKMSKey.Arn
    Export:
      Name: !Sub ${ProjectName}-${Environment}-CosignerKMSKey-ARN

  APIGatewayEndpointId:
    Description: API Gateway VPC Endpoint ID
    Value: !Ref APIGatewayEndpoint
    Export:
      Name: !Sub ${ProjectName}-${Environment}-APIGatewayEndpoint-ID
