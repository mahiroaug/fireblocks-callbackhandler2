AWSTemplateFormatVersion: "2010-09-09"
Description: "Fireblocks Callback Handler - Lambda + API Gateway (Private)"

Parameters:
  ProjectName:
    Type: String
    Description: Project name for resource naming
  Environment:
    Type: String
    AllowedValues: [dev, stg, prod, cm]
    Description: Environment name
  ContainerImage:
    Type: String
    Description: ECR image URI (e.g. xxxx.dkr.ecr.ap-northeast-1.amazonaws.com/repo:tag)

Resources:
  # Log group
  CallbackLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-callback-${Environment}"
      RetentionInDays: 30

  # Lambda Function (Container)
  CallbackLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-callback-${Environment}"
      PackageType: Image
      Code:
        ImageUri: !Ref ContainerImage
      MemorySize: 1024
      Timeout: 300
      Role:
        Fn::ImportValue: !Sub ${ProjectName}-${Environment}-LambdaExecutionRole-ARN
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-LambdaSecurityGroup-ID
        SubnetIds:
          - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-PrivateSubnet-ID
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          USE_SSM_PARAMETERS: "true"
          CALLBACK_PRIVATE_KEY_PARAMETER: !Sub "/${ProjectName}/${Environment}/jwt/callback-private-key"
          COSIGNER_PUBLIC_KEY_PARAMETER: !Sub "/${ProjectName}/${Environment}/jwt/cosigner-public-key"
          LOG_LEVEL: "INFO"
          ALLOW_ZERO_SIGNATURE: "false"
          FULL_JWT_LOGGING: "false"
          APPROVAL_DELAY_MS: "500"
      ImageConfig:
        Command: ["app.handler"]
      Architectures: [x86_64]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: lambda
        - Key: Project
          Value: fireblocks-callback-handler

  # API Gateway Private REST API
  PrivateRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${ProjectName}-api-${Environment}"
      EndpointConfiguration:
        Types: [PRIVATE]
        VpcEndpointIds:
          - Fn::ImportValue: !Sub ${ProjectName}-${Environment}-APIGatewayEndpoint-ID
      Policy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource: "*"
            Condition:
              StringEquals:
                aws:SourceVpc:
                  Fn::ImportValue: !Sub ${ProjectName}-${Environment}-VPC-ID

  ApiResourceCallback:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PrivateRestApi
      ParentId: !GetAtt PrivateRestApi.RootResourceId
      PathPart: callback

  ApiResourceV2:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PrivateRestApi
      ParentId: !Ref ApiResourceCallback
      PathPart: v2

  ApiResourceTxSignRequest:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PrivateRestApi
      ParentId: !Ref ApiResourceV2
      PathPart: tx_sign_request

  ApiResourceHealth:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PrivateRestApi
      ParentId: !GetAtt PrivateRestApi.RootResourceId
      PathPart: health

  TxSignRequestPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PrivateRestApi
      ResourceId: !Ref ApiResourceTxSignRequest
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CallbackLambda.Arn}/invocations"

  HealthGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PrivateRestApi
      ResourceId: !Ref ApiResourceHealth
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CallbackLambda.Arn}/invocations"

  # Permission for API Gateway to invoke Lambda for POST /callback/v2/tx_sign_request
  TxSignRequestPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CallbackLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PrivateRestApi}/prod/POST/callback/v2/tx_sign_request"

  # Permission for API Gateway to invoke Lambda for GET /health
  HealthGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CallbackLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PrivateRestApi}/prod/GET/health"

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref PrivateRestApi
      StageName: prod
    DependsOn:
      - TxSignRequestPostMethod
      - HealthGetMethod
      - TxSignRequestPostPermission
      - HealthGetPermission

Outputs:
  LambdaArn:
    Description: Callback Lambda ARN
    Value: !Ref CallbackLambda
    Export:
      Name: !Sub ${ProjectName}-${Environment}-CallbackLambda-ARN

  ApiGatewayInvokeUrl:
    Description: The invoke URL for the API Gateway stage
    Value: !Sub "https://${PrivateRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: !Sub ${ProjectName}-${Environment}-ApiGatewayInvokeUrl
